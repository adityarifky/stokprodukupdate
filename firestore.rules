rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // USERS: Allow users to read their own data and write to it.
    // Admins or specific roles could be given broader access if needed.
    match /users/{userId} {
      allow read, update, delete: if isAuthenticated() && request.auth.uid == userId;
      allow create: if isAuthenticated();
    }
    
    // USER-ACTIVITY: Allow authenticated users to create new activity logs.
    // Logs should be immutable once created.
    match /user-activity/{activityId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if false; // Make logs immutable
    }

    // PRODUCTS: Allow any authenticated user to read/write product data.
    // You might want to restrict write access to certain roles (e.g., 'Management') in the future.
    match /products/{productId} {
      allow read, write: if isAuthenticated();
    }
    
    // BUNDLES: Allow any authenticated user to manage product bundles.
    match /bundles/{bundleId} {
      allow read, write: if isAuthenticated();
    }

    // STOCK HISTORY: Allow authenticated users to create history records.
    // These records should be immutable to maintain a reliable audit trail.
    match /stock_history/{historyId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated();
        allow update, delete: if false; // Make history immutable
    }

    // ANNOUNCEMENTS: Allow authenticated users to read announcements.
    // You might restrict creation to an 'admin' or 'management' role later.
    match /announcements/{announcementId} {
      allow read: if isAuthenticated();
      // Example for future: allow create, update, delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.position == 'Management';
      allow write: if isAuthenticated(); // For now, allow any logged-in user to write
    }
    
    // CHATS: Secure chat messages between two participants.
    match /chats/{chatId} {
        // Allow read/write access only to the participants of the chat
        allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participants;
        
        // Messages can only be read/written by chat participants.
        match /messages/{messageId} {
            allow read, write: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        }
    }
  }
}
