
rules_version = '2';

// By default, deny all reads and writes.
// We will explicitly grant access below for security.
service cloud.firestore {
  match /databases/{database}/documents {

    // HELPER FUNCTIONS =================================
    // These functions make our rules easier to read and maintain.

    // Is the user signed in?
    function isSignedIn() {
      return request.auth != null;
    }

    // Is the user the owner of the document they are trying to access?
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Does the user have the 'Management' role?
    // This is the SAFE version: it first checks if the user's profile document exists
    // before trying to read data from it. This prevents errors for new users.
    function isManagement() {
      let userDocPath = /databases/$(database)/documents/users/$(request.auth.uid);
      // Check for existence AND the correct role.
      return isSignedIn() && exists(userDocPath) && get(userDocPath).data.position == 'Management';
    }


    // COLLECTION RULES =================================

    // --- USERS ---
    // Anyone signed in can see user profiles (for user lists, avatars, etc.).
    // A user can only create or change their OWN profile.
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create, update: if isOwner(userId);
    }

    // --- PRODUCTS & BUNDLES ---
    // Anyone signed in can view products and bundles.
    // Only 'Management' can add, edit, or delete them.
    match /products/{productId} {
      allow read: if isSignedIn();
      allow write: if isManagement(); // 'write' covers create, update, delete
    }
    match /bundles/{bundleId} {
      allow read: if isSignedIn();
      allow write: if isManagement(); // 'write' covers create, update, delete
    }

    // --- STOCK HISTORY ---
    // Anyone signed in can read the history and add new entries (when they update stock).
    match /stock_history/{historyId} {
      allow read, create: if isSignedIn();
    }

    // --- ANNOUNCEMENTS ---
    // Anyone signed in can read announcements and replies.
    // Anyone signed in can post a reply.
    // Only 'Management' can post, edit, or delete the main announcement.
    match /announcements/{announcementId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isManagement();

      match /replies/{replyId} {
        allow read, create: if isSignedIn();
      }
    }

    // --- USER ACTIVITY (Sensitive Data) ---
    // Only 'Management' can view the activity log of all users.
    // A user can only create a log entry for their own activity.
    match /user-activity/{activityId} {
      allow read: if isManagement();
      allow create: if isOwner(request.resource.data.userId);
    }
    
    // --- CHATS (Private Data) ---
    // Logic for private 1-on-1 chats.
    match /chats/{chatId} {
      
      // To create a chat, the user must be one of the participants in the new document.
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.participants;
      
      // To read or update a chat document (e.g., last message timestamp), the user must be a participant.
      allow read, update: if isSignedIn() && request.auth.uid in resource.data.participants;
      
      // --- MESSAGES Sub-collection ---
      match /messages/{messageId} {
        // To read messages, the user must be a participant of the parent chat document.
        // This requires one extra read operation to check the parent.
        function isChatParticipant() {
          return isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        }

        allow read: if isChatParticipant();
        
        // To create a message, the user must be a participant AND the sender of the message.
        allow create: if isChatParticipant() && isOwner(request.resource.data.senderId);
      }
    }
  }
}
