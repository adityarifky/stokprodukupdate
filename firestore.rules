rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    //  Helper Functions (Highly Secure)
    // =================================
    function isLoggedIn() {
      return request.auth != null;
    }

    // This is the most robust version. It checks:
    // 1. User is authenticated.
    // 2. The user's profile document exists.
    // 3. The 'position' field exists within that document.
    // 4. The 'position' field is exactly 'Management'.
    // This prevents any errors from malformed data or race conditions.
    function isManagement() {
      let userPath = /databases/$(database)/documents/users/$(request.auth.uid);
      return isLoggedIn() &&
             exists(userPath) &&
             'position' in get(userPath).data &&
             get(userPath).data.position == 'Management';
    }

    // =================================
    //  Collection Rules
    // =================================

    match /users/{userId} {
      allow read: if isLoggedIn();
      allow create, update: if isLoggedIn() && request.auth.uid == userId;
    }

    match /user-activity/{activityId} {
      allow read: if isManagement();
      allow create: if isLoggedIn() && request.auth.uid == request.resource.data.userId;
    }

    match /products/{docId} {
      allow read: if isLoggedIn();
      allow create, update, delete: if isManagement();
    }
    match /bundles/{docId} {
      allow read: if isLoggedIn();
      allow create, update, delete: if isManagement();
    }
    match /stock_history/{docId} {
      allow read, create: if isLoggedIn();
    }
    match /announcements/{announcementId} {
      allow read: if isLoggedIn();
      allow create, update, delete: if isManagement();

      match /replies/{replyId} {
        allow read, create: if isLoggedIn();
      }
    }
    
    match /chats/{chatId} {
      function isParticipant() {
        // On read/update, 'resource' is the existing doc.
        return request.auth.uid in resource.data.participants;
      }
      function isParticipantOnCreate() {
        // On create, 'resource' is the incoming doc.
        return request.auth.uid in request.resource.data.participants;
      }
      function isMessageSender(message) {
        return request.auth.uid == message.senderId;
      }
      function isParentChatParticipant() {
         let chatDoc = get(/databases/$(database)/documents/chats/$(chatId));
         return 'participants' in chatDoc.data && request.auth.uid in chatDoc.data.participants;
      }

      allow read, update: if isLoggedIn() && isParticipant();
      allow create: if isLoggedIn() && isParticipantOnCreate();
      
      match /messages/{messageId} {
        allow read: if isLoggedIn() && isParentChatParticipant();
        allow create: if isLoggedIn() && isParentChatParticipant() && isMessageSender(request.resource.data);
      }
    }
  }
}
