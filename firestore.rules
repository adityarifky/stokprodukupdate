rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // Helper Functions (Secure & Verified)
    // =================================
    
    // Checks if a user is authenticated. This is the root of all security.
    function isAuthed() {
      return request.auth != null;
    }

    // Checks if the authenticated user is the owner of a document.
    function isOwner(userId) {
      return isAuthed() && request.auth.uid == userId;
    }

    // Securely checks if the user has the 'Management' role.
    // It verifies auth AND document existence before checking the 'position' field.
    function isManagement() {
      let userDocPath = /databases/$(database)/documents/users/$(request.auth.uid);
      return isAuthed() && exists(userDocPath) &&
             get(userDocPath).data.position == 'Management';
    }
    
    // Securely checks if the user is a participant in a specific chat.
    function isChatParticipant(chatId) {
      let chatDocPath = /databases/$(database)/documents/chats/$(chatId);
      return isAuthed() && exists(chatDocPath) &&
             request.auth.uid in get(chatDocPath).data.participants;
    }

    // =================================
    // Collection Rules
    // =================================

    // USERS: Any authenticated user can read profiles (for names, avatars).
    // A user can only create or update their own document.
    match /users/{userId} {
      allow read: if isAuthed();
      allow create, update: if isOwner(userId);
    }
    
    // PRODUCTS, BUNDLES, ANNOUNCEMENTS: Any authenticated user can read.
    // Only management can write (create, update, delete).
    match /products/{docId} {
      allow read: if isAuthed();
      allow create, update, delete: if isManagement();
    }
    match /bundles/{docId} {
      allow read: if isAuthed();
      allow create, update, delete: if isManagement();
    }
    match /announcements/{announcementId} {
      allow read: if isAuthed();
      allow create, update, delete: if isManagement();
      
      // REPLIES: Any authenticated user can read or create replies.
      match /replies/{replyId} {
        allow read, create: if isAuthed();
      }
    }
    
    // STOCK HISTORY: Any authenticated user can read or create history records.
    match /stock_history/{docId} {
      allow read, create: if isAuthed();
    }
    
    // USER ACTIVITY: This is sensitive.
    // Only management can read the activity log.
    // A user can only create their OWN activity record.
    match /user-activity/{activityId} {
      allow read: if isManagement();
      allow create: if isOwner(request.resource.data.userId);
    }
    
    // CHATS: This is private.
    // Participants can read/update the chat document (e.g., last message timestamp).
    // A new chat can only be created if the current user is a participant.
    match /chats/{chatId} {
      allow read, update: if isChatParticipant(chatId);
      allow create: if isAuthed() && request.auth.uid in request.resource.data.participants;
      
      // MESSAGES:
      // Participants can read messages.
      // A user can only create a message in a chat they belong to, and they must be the sender.
      match /messages/{messageId} {
        allow read: if isChatParticipant(chatId);
        allow create: if isChatParticipant(chatId) && isOwner(request.resource.data.senderId);
      }
    }
  }
}
