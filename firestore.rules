
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // Helper Functions (SAFE)
    // =================================

    // Checks if a user is authenticated and has the 'Management' role.
    // CRITICAL FIX: The check `request.auth != null` MUST come first.
    function isManagement() {
      let userDocPath = /databases/$(database)/documents/users/$(request.auth.uid);
      return request.auth != null && exists(userDocPath) && get(userDocPath).data.position == 'Management';
    }

    // Checks if the requesting user is the owner of the document.
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Checks if the requesting user is a participant in a specific chat.
    function isChatParticipant(chatId) {
      let chatDocPath = /databases/$(database)/documents/chats/$(chatId);
      return request.auth != null && exists(chatDocPath) && request.auth.uid in get(chatDocPath).data.participants;
    }

    // =================================
    // Collection Rules (FINAL & COMPLETE)
    // =================================

    // Users: Logged-in users can read. Only the owner can write.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create, update: if isOwner(userId);
    }

    // Products & Bundles: Logged-in users can read. Only Management can write.
    match /products/{docId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isManagement();
    }
    match /bundles/{docId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isManagement();
    }

    // Stock History: Logged-in users can read and create.
    match /stock_history/{docId} {
      allow read, create: if request.auth != null;
    }

    // Announcements: Logged-in users can read. Only Management can create/edit/delete.
    match /announcements/{announcementId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isManagement();

      // Replies: Logged-in users can read and create replies.
      match /replies/{replyId} {
        allow read, create: if request.auth != null;
      }
    }

    // User Activity (Sensitive): Only Management can read. Users can only create their own activity log.
    match /user-activity/{activityId} {
      allow read: if isManagement();
      allow create: if isOwner(request.resource.data.userId);
    }

    // Chats (Private):
    match /chats/{chatId} {
      allow read, update: if isChatParticipant(chatId);
      // User must be one of the participants to create a chat.
      allow create: if request.auth != null && request.auth.uid in request.resource.data.participants;
      
      match /messages/{messageId} {
        allow read: if isChatParticipant(chatId);
        // User must be a participant AND the sender to create a message.
        allow create: if isChatParticipant(chatId) && isOwner(request.resource.data.senderId);
      }
    }
  }
}
